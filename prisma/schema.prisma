generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at  DateTime?
  availability String?

  email      String? @unique
  username   String? @unique
  name       String? @db.VarChar(255)
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
  password   String? @db.VarChar(255)
  domain     String? @unique
  avatar     String?

  phone_number  String?
  country       String?
  state         String?
  city          String?
  address       String?
  zip_code      String?
  gender        String?
  date_of_birth DateTime? @db.Date
  about_me           String? @db.Text

  // billing id. e.g. stripe customer id
  billing_id String?

  type              String?   @default("user")
  email_verified_at DateTime?

  is_two_factor_enabled Int?    @default(0)
  two_factor_secret     String? // secret key for two factor authentication
  facebook_id           String?

  accounts                  Account[]
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  receiver_messages         Message[]      @relation("receiver")
  sender_messages           Message[]      @relation("sender")
  receiver_notifications    Notification[] @relation("receiver")
  sender_notifications      Notification[] @relation("sender")

  // packages           Package[] @relation("UserPackagesTraveller")
  packages_owner     Package[] @relation("UserPackagesOwner")
  reports            Report[]  @relation("UserReports")
  bookings           Booking[] @relation("UserBookingsTraveller")
  reviews_given      Review[]  @relation("ReviewGiven")
  reviews_for        Review[]  @relation("ReviewFor")
  travels            Travel[]  @relation("UserTravels")

  bookings_cancel_by Booking[] @relation("UserBookingsCancelBy")
  bookings_owner     Booking[] @relation("UserBookingsOwner")

  user_payment_methods UserPaymentMethod[]
  user_settings        UserSetting[]
  ucodes               Ucode[]
  roles                Role[]
  role_users           RoleUser[]
  payment_transactions PaymentTransaction[]
  paymentAccounts PaymentAccount[]
  
  wallet              Wallet?  

  @@map("users")
}

// travellerShipments    Shipment[] @relation("TravellerShipments")
// cancelledShipments    Shipment[] @relation("CancelledShipments")
// ownerShipments        Shipment[] @relation("OwnerShipments")


model Ucode {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1) @db.SmallInt

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  token      String?
  email      String?
  expired_at DateTime?

  @@map("ucodes")
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  title  String?
  name   String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  title      String?
  action     String?
  subject    String?
  conditions String?
  fields     String?

  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

// this table stores notification event
model NotificationEvent {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  type   String?
  text   String?

  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  read_at DateTime?

  status Int? @default(1) @db.SmallInt

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  notification_event_id String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])

  entity_id String?

  @@map("notifications")
}

model UserPaymentMethod {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  payment_method_id String?
  checkout_id       String?

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  store_id String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  order_id         String?
  type             String?  @default("order")
  withdraw_via     String?  @default("wallet")
  provider         String?
  reference_number String?
  status           String?  @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?

  @@map("payment_transactions")
}

// ---------Start Chat schema---------

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

// message is used for conversation
model Message {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status MessageStatus? @default(PENDING)

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  conversation_id String?
  conversation    Conversation? @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  attachment_id String?
  attachment    Attachment? @relation(fields: [attachment_id], references: [id])

  message String?

  @@map("messages")
}

// this table stores attachment of message
model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name     String?
  type     String?
  size     Int?
  file     String?
  file_alt String?

  messages Message[]

  @@map("attachments")
}

// this table stores conversation
model Conversation {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  creator_id String?
  creator    User?   @relation("creator", fields: [creator_id], references: [id])

  participant_id String?
  participant    User?   @relation("participant", fields: [participant_id], references: [id])

  package_id String?
  package    Package? @relation(fields: [package_id], references: [id], onDelete: SetNull)

  travel_id String?
  travel    Travel? @relation(fields: [travel_id], references: [id], onDelete: SetNull)

  messages Message[]

  @@map("conversations")
}

// ---------End Chat schema---------

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  category      String?
  label         String?
  description   String?
  key           String? @unique
  default_value String?

  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  setting_id String?
  setting    Setting? @relation(fields: [setting_id], references: [id])

  value String?

  @@map("user_settings")
}

// this table stores example
// model Note {
//   id                String  @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1) @db.SmallInt

//   title String?
//   body  String? @db.Text

//   tenant_id Int?
//   tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
//   @@map("posts")
// }

model Package {
  id                String   @id @default(uuid())
  category          String
  weight            String
  value             String
  length            String?
  depth             String?
  width             String?
  is_electronic     Boolean? @default(false)
  photo             String?
  pick_up_location  String
  pick_up_parson    String
  drop_off_location String
  drop_off_parson   String
  publish           Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  status String? @default("new")

  // traveller_id String?
  owner_id     String
  // traveller User? @relation("UserPackagesTraveller", fields: [traveller_id], references: [id])
  owner     User  @relation("UserPackagesOwner", fields: [owner_id], references: [id])

  announcement_requests AnnouncementRequest[]
  conversations         Conversation[]
  reports               Report[]

  bookings         Booking[]
  
  @@map("packages")
}

enum ReportType {
  package
  travel
}
model Report {
  id                  String   @id @default(cuid())

  shot_description    String?
  details_description String?

  report_for          ReportType?
  reported_by_id      String
  reported_by         User     @relation("UserReports", fields: [reported_by_id], references: [id])

  package_id          String?
  package             Package?  @relation(fields: [package_id], references: [id])

  travel_id           String?
  travel              Travel?   @relation(fields: [travel_id], references: [id])

  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@map("reports")
}

// model Cancel {
//   id                  String   @id @default(cuid())
//   cancel_by_id        String
//   cancel_by           User     @relation("UserBookingsCancelBy", fields: [cancel_by_id], references: [id])
//   cancel_by_who       String // package_owner or traveller
//   cancel_reason        Json
//   description           String
//   booking_id            String


//   booking               Booking  @relation(fields: [booking_id], references: [id])

//   created_at                  DateTime @default(now())
//   updated_at                  DateTime @updatedAt
//   @@map("cancels")
// }

enum BookingStatus { // ShipmentStatus
  in_progress
  pick_up
  on_the_way
  delivered
  completed
  rejected
  cancel
  problem_with_the_package
  all_conditions_are_not_met

}


model Booking {
  id                           String        @id @default(cuid())
  status                       BookingStatus  @default(pick_up)// ShipmentStatus
  paid                          Boolean       @default(false)
  amount                        Decimal?


  // pick up
  pick_up_photo                String?
  pick_up_owner_sign           String?
  pick_up_traveller_sign       String?


  // delivery
  drop_off_photo               String?
  drop_off_owner_sign          String?
  drop_off_traveller_sign      String?

  // cancel
  cancel                       Boolean @default(false)
  cancel_reason                Json?
  // cancel_description           String?
  cancel_by_id                 String?
  cancel_by                    User?          @relation("UserBookingsCancelBy", fields: [cancel_by_id], references: [id])
  cancel_by_who                String? // package_owner or traveller


  confirmed                    Boolean  @default(false)


  // problem with the package
  problem                      Boolean @default(false)
  problem_reason               Json?
  problem_photo                String?

  // all conditions are not met
  all_conditions_are_not_met               Boolean @default(false)
  all_conditions_are_not_met_reason        Json?
  

  traveller_id String?
  owner_id     String?
  traveller    User?   @relation("UserBookingsTraveller", fields: [traveller_id], references: [id], onDelete: SetNull)
  owner        User?   @relation("UserBookingsOwner", fields: [owner_id], references: [id], onDelete: SetNull)

  package_id                  String
  package                     Package @relation(fields: [package_id], references: [id])

  travel_id                   String
  travel                      Travel  @relation(fields: [travel_id], references: [id])

  reviews                     Review[]




  created_at                  DateTime @default(now())
  updated_at                  DateTime @updatedAt

  @@map("bookings")
}



model Travel {
  id                      String   @id @default(uuid())
  flight_number           String
  airline                 String
  duration                String
  departure               DateTime
  collect_radius          String
  arrival                 DateTime
  drop_radius             String
  number_of_checked_bags  Json
  number_of_cabin_bags    Json
  accept_electronic_items Boolean
  trip_details            String
  publish                 Boolean

  user                    User   @relation("UserTravels", fields: [user_id], references: [id])
  user_id                 String

  announcement_requests   AnnouncementRequest[]
  conversations           Conversation[]
  bookings                Booking[]
  reports                 Report[]

  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  @@map("travels")
}

model Chat {
  id          String   @id @default(uuid())
  duration    Int
  startedAt   DateTime
  endedAt     DateTime
  workspaceId String
}

enum ReviewForm {
  package_owner
  traveller
}
model Review {
  id          String   @id @default(uuid())
  review_text String
  rating      Int
  review_from   ReviewForm

  review_by_id  String
  review_for_id String
  booking_id    String

  booking    Booking @relation(fields: [booking_id], references: [id])
  review_by  User @relation("ReviewGiven", fields: [review_by_id], references: [id])
  review_for User @relation("ReviewFor", fields: [review_for_id], references: [id])

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("reviews")
}

model ProblemWithPackage {
  id          String @id @default(uuid())
  package_id  String
  reason      String
  description String
  photo       String
}



model AnnouncementRequest {
  id          String   @id @default(cuid())
  is_accepted Boolean  @default(false)
  is_refused   Boolean  @default(false)
  package_id  String
  package     Package  @relation(fields: [package_id], references: [id], onDelete: Cascade)
  travel_id   String
  travel      Travel   @relation(fields: [travel_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("announcement_requests")
}

enum TransactionType {
  DEPOSIT
  SPEND
  WITHDRAW
  REFUND
  HOLD
  RELEASE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Wallet {
  id          String             @id @default(uuid())
  user_id     String?            @unique
  user        User?              @relation(fields: [user_id], references: [id])
  balance     Float              @default(0)
  currency    String             @default("usd")
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
  transactions WalletTransaction[]

  @@index([user_id])
  @@map("wallets")
}

model WalletTransaction {
  id          String           @id @default(uuid())
  wallet_id   String
  wallet      Wallet           @relation(fields: [wallet_id], references: [id])
  type        TransactionType
  amount      Float
  status      TransactionStatus @default(PENDING)
  stripe_id   String?
  metadata    Json?
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt

  @@index([wallet_id])
  @@index([stripe_id])
  @@map("wallet_transactions")
}

model WalletConfig {
  id          Int     @id @default(autoincrement())
  currency    String  @default("usd")
  min_deposit Float   @default(5.0)
  min_withdraw Float  @default(10.0)
  platform_account_id String
  central_wallet_id String

  @@unique([currency])
  @@map("wallet_configs")
}

model PaymentAccount {
  id           String   @id @default(uuid())
  user_id      String
  user         User     @relation(fields: [user_id], references: [id])
  provider     String   // 'stripe', 'paypal', etc.
  account_id   String   // External account ID
  is_default   Boolean  @default(false)
  metadata     Json?    // Store provider-specific data
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@unique([user_id, provider, account_id])
  @@map("payment_accounts")
}